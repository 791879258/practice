链接：https://www.nowcoder.com/questionTerminal/8b3b95850edb4115918ecebdf1b4d222
来源：牛客网

class Solution {
public:
 
    // 左右子树深度的最大值 + 1
    int TreeDepth(TreeNode* pRoot) {
        if(!pRoot) return 0;
        int left = TreeDepth(pRoot->left);
        int right = TreeDepth(pRoot->right);
        return 1 + max(left, right);
    }
 
    // 平衡二叉树
    // 解法一: 判断每个结点的左右子树的深度之差不超过一
    bool IsBalanced_Solution(TreeNode* pRoot) {
        if(!pRoot) return true;
 
        int left = TreeDepth(pRoot->left);
        int right = TreeDepth(pRoot->right);
        if(abs(left - right) > 1) {
            return false;
        }
        // 继续判断左右子树
        return IsBalanced_Solution(pRoot->left) && IsBalanced_Solution(pRoot->right);
    }
 
    // 平衡二叉树
    // 解法二: 后序遍历二叉树, 同时记录每个结点的深度, 并判断每个结点是否平衡
    // 此方法中每个结点只被访问一次
    bool IsBalanced_Solution(TreeNode* pRoot) {
        int depth = 0;
        return IsBalanced_Solution(pRoot, depth);
    }
 
    // 后序遍历
    bool IsBalanced_Solution(TreeNode* pRoot, int &pDepth) {
        if(!pRoot) {
            pDepth = 0;
            return true;
        }
        int left, right;  // 记录左右子树的深度
        if(IsBalanced_Solution(pRoot->left, left) && IsBalanced_Solution(pRoot->right, right)) {
            if(abs(left - right) <= 1) {
                pDepth = 1 + max(left, right);
                return true;
            }
        }
        return false;
    }
     
};